
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports: ["2181:2181"]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      retries: 5


  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports: ["9092:9092","29092:29092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      healthcheck:
        test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
        interval: 10s
        timeout: 5s
      retries: 5
        retries: 5
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      retries: 5


  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: marine
      POSTGRES_PASSWORD: marinepw
      POSTGRES_DB: marine_db
    volumes:
      - ./postgres_setup/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      retries: 5


  buoy_phys:
    build:
      context: .
      dockerfile: producers/noaa_phys/Dockerfile
    container_name: producer-noaa
    env_file: .env
    depends_on:
      kafka:
        condition: service_started
    networks: [marine_net]

  buoy_insitu_db:
    build:
      context: .
      dockerfile: producers/copernicus_insitu/Dockerfile
    container_name: producer-insitu-db
    env_file: .env
    environment:
      - PLATFORM_TYPE=DB
    depends_on:
      kafka:
        condition: service_started
    networks: [marine_net]

  buoy_insitu_tg:
    build:
      context: .
      dockerfile: producers/copernicus_insitu/Dockerfile
    container_name: producer-insitu-tg
    env_file: .env
    environment:
      - PLATFORM_TYPE=TG
    depends_on:
      kafka:
        condition: service_started
    networks: [marine_net]

  buoy_biochem:
    build:
      context: .
      dockerfile: producers/copernicus_biochem/Dockerfile
    container_name: producer-biochem
    env_file: .env
    depends_on:
      kafka:
        condition: service_started
    networks: [marine_net]

networks:
  marine_net:
    driver: bridge
