version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    platform: linux/amd64
    container_name: zookeeper
    environment: { ZOOKEEPER_CLIENT_PORT: 2181, ZOOKEEPER_TICK_TIME: 2000 }
    networks: [marine_network]

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    platform: linux/amd64
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports: ["9092:9092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks: [marine_network]

  postgres:
    image: postgres:15
    platform: linux/amd64
    container_name: postgres
    environment: { POSTGRES_USER: flink, POSTGRES_PASSWORD: flinkpw, POSTGRES_DB: marine }
    volumes: ["./postgres_setup/init.sql:/docker-entrypoint-initdb.d/init.sql"]
    ports: ["5432:5432"]
    networks: [marine_network]

  buoy_phys:
    build:
      context: .
      dockerfile: producers/noaa_phys/Dockerfile
    container_name: producer-noaa
    depends_on:
      kafka:
        condition: service_started
    networks: [marine_network]

  buoy_insitu_db:
    build:
      context: .
      dockerfile: producers/copernicus_insitu/Dockerfile
    container_name: producer-insitu-db
    env_file: .env
    environment:
      - PLATFORM_TYPE=DB
    depends_on:
      kafka:
        condition: service_started
    networks: [marine_network]

  buoy_insitu_tg:
    build:
      context: .
      dockerfile: producers/copernicus_insitu/Dockerfile
    container_name: producer-insitu-tg
    env_file: .env
    environment:
      - PLATFORM_TYPE=TG
    depends_on:
      kafka:
        condition: service_started
    networks: [marine_network]

  buoy_biochem:
    build:
      context: .
      dockerfile: producers/copernicus_biochem/Dockerfile
    container_name: producer-biochem
    env_file: .env
    depends_on:
      kafka:
        condition: service_started
    networks: [marine_network]

networks:
  marine_network:
    name: marine_network
